// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractBody, AbstractGame, AbstractPlayer, UUID, V, cardinals, diagonals, frame_rate, _;

  V = require('./server_box2d_vector').V;

  frame_rate = require('./frame_rate');

  _ = require('underscore');

  UUID = require('./library/uuid').UUID;

  cardinals = {
    left: V(-1, 0),
    right: V(1, 0),
    up: V(0, 1),
    down: V(0, -1)
  };

  diagonals = [V(1, 1), V(1, -1), V(-1, -1), V(-1, 1)];

  AbstractBody = (function() {

    AbstractBody.prototype.type = 'body';

    function AbstractBody(game, id) {
      this.game = game;
      this.id = id != null ? id : UUID();
      this.game.bodies[this.id] = this;
      this.setup();
    }

    AbstractBody.prototype.remove = function() {
      delete this.game.bodies[this.id];
      return this.teardown();
    };

    AbstractBody.prototype.setup = function() {};

    AbstractBody.prototype.teardown = function() {};

    AbstractBody.prototype.toJSON = function() {
      return _.extend(this.changes(), this.unchanges());
    };

    AbstractBody.prototype.force = function(vector, position) {
      if (position == null) {
        position = this.body.GetPosition();
      }
      return this.body.ApplyForce(vector, position);
    };

    AbstractBody.prototype.get_angle = function() {
      return this.body.GetAngle();
    };

    AbstractBody.prototype.get_position = function() {
      return this.body.GetPosition();
    };

    AbstractBody.prototype.changes = function() {
      return {
        id: this.id,
        position: this.body.GetPosition(),
        angle: this.body.GetAngle()
      };
    };

    AbstractBody.prototype.unchanges = function() {
      return {
        type: this.type,
        size: this.size
      };
    };

    return AbstractBody;

  })();

  AbstractPlayer = (function() {

    function AbstractPlayer(_arg) {
      var _ref;
      this.game = _arg.game, this.user = _arg.user, this.id = _arg.id;
      if ((_ref = this.id) == null) {
        this.id = UUID();
      }
      this.clear_commands();
      this.game.players[this.id] = this;
      this.user.player = this;
      this.name = this.id;
      this.setup();
    }

    AbstractPlayer.prototype.remove = function() {
      delete players[this.id];
      return this.teardown();
    };

    AbstractPlayer.prototype.setup = function() {};

    AbstractPlayer.prototype.teardown = function() {};

    AbstractPlayer.prototype.control = function() {};

    AbstractPlayer.prototype.other_player = function() {
      var id, player, _ref;
      _ref = this.game.players;
      for (id in _ref) {
        player = _ref[id];
        if (id !== this.id) {
          return player;
        }
      }
    };

    AbstractPlayer.prototype.press = function(command) {
      console.log(command);
      return this.commands[command] = true;
    };

    AbstractPlayer.prototype.release = function(command) {
      return delete this.commands[command];
    };

    AbstractPlayer.prototype.clear_commands = function() {
      return this.commands = {};
    };

    return AbstractPlayer;

  })();

  AbstractGame = (function() {

    function AbstractGame(sockets, id) {
      this.sockets = sockets;
      this.id = id != null ? id : UUID();
      _.bindAll(this, 'step');
      this.channel = "game-" + this.id;
      this.players = {};
      this.bodies = {};
      this.setup();
      this.start();
    }

    AbstractGame.prototype.remove = function() {
      clearTimeout(this.timer);
      return this.teardown();
    };

    AbstractGame.prototype.setup = function() {};

    AbstractGame.prototype.teardown = function() {};

    AbstractGame.prototype.start = function() {
      return this.timer = setInterval(this.step, frame_rate.frame_length_milliseconds);
    };

    AbstractGame.prototype.step = function() {
      this.control_players();
      this.step_world();
      return this.broadcast_changes();
    };

    AbstractGame.prototype.control_players = function() {
      var id, player, _ref, _results;
      _ref = this.players;
      _results = [];
      for (id in _ref) {
        player = _ref[id];
        _results.push(player.control());
      }
      return _results;
    };

    AbstractGame.prototype.step_world = function() {
      this.world.Step(frame_rate.frame_length_seconds, 10, 10);
      return this.world.ClearForces();
    };

    AbstractGame.prototype.broadcast_changes = function() {
      var body, changes, id;
      changes = (function() {
        var _ref, _results;
        _ref = this.bodies;
        _results = [];
        for (id in _ref) {
          body = _ref[id];
          if (body.body.IsAwake()) {
            _results.push(body.changes());
          }
        }
        return _results;
      }).call(this);
      return this.sockets["in"](this.channel).volatile.emit('update', changes);
    };

    AbstractGame.prototype.toJSON = function() {
      return {
        id: this.id,
        things: this.bodies
      };
    };

    return AbstractGame;

  })();

  exports.cardinals = cardinals;

  exports.diagonals = diagonals;

  exports.AbstractBody = AbstractBody;

  exports.AbstractPlayer = AbstractPlayer;

  exports.AbstractGame = AbstractGame;

}).call(this);
