// Generated by CoffeeScript 1.3.3
(function() {
  var Game, Player, Thing, UUID, V, b2d, box_body_def, box_fixture_def, box_shape_def, box_size, frame_rate, gravity, players, speed, things, _;

  b2d = require('box2dnode');

  V = require('./server_box2d_vector').V;

  frame_rate = require('./frame_rate');

  _ = require('underscore');

  UUID = require('./library/uuid').UUID;

  gravity = V(0, 0);

  speed = 20;

  box_size = V(2, 2);

  box_body_def = new b2d.b2BodyDef;

  box_body_def.type = b2d.b2Body.b2_dynamicBody;

  box_shape_def = new b2d.b2CircleShape;

  box_shape_def.m_radius = 1;

  box_fixture_def = new b2d.b2FixtureDef;

  box_fixture_def.shape = box_shape_def;

  box_fixture_def.density = 1.0;

  box_fixture_def.friction = 0.3;

  box_body_def.linearDamping = 1;

  box_body_def;


  things = {};

  Thing = (function() {

    function Thing(game, id) {
      this.game = game;
      this.id = id != null ? id : UUID();
      this.body = this.game.world.CreateBody(box_body_def);
      this.body.CreateFixture(box_fixture_def);
      this.game.things[this.id] = this;
    }

    Thing.prototype.toJSON = function() {
      return {
        id: this.id,
        size: box_size,
        position: this.body.GetPosition()
      };
    };

    Thing.prototype.force = function(direction) {
      return this.body.ApplyForce(direction.scale(speed), this.body.GetPosition());
    };

    Thing.prototype.changes = function() {
      return {
        id: this.id,
        position: this.body.GetPosition()
      };
    };

    Thing.prototype.remove = function() {
      this.game.world.DestroyBody(this.body);
      return delete things[this.id];
    };

    return Thing;

  })();

  players = {};

  Player = (function() {

    function Player(game, user, id) {
      this.game = game;
      this.user = user;
      this.id = id != null ? id : UUID();
      this.user.player = this;
      this.physics = new Thing(this.game, this.id);
      this.clear_commands();
      this.game.players[this.id] = this;
      this.name = this.id;
    }

    Player.prototype.press = function(command) {
      return this.commands[command] = true;
    };

    Player.prototype.release = function(command) {
      return delete this.commands[command];
    };

    Player.prototype.clear_commands = function() {
      return this.commands = {};
    };

    Player.prototype.control = function() {
      if (this.commands.left) {
        this.physics.force(V(-1, 0));
      }
      if (this.commands.right) {
        this.physics.force(V(+1, 0));
      }
      if (this.commands.up) {
        this.physics.force(V(0, -1));
      }
      if (this.commands.down) {
        return this.physics.force(V(0, +1));
      }
    };

    Player.prototype.remove = function() {
      delete players[this.id];
      return this.physics.remove();
    };

    return Player;

  })();

  Game = (function() {

    function Game(_arg, sockets, id) {
      var challengee, challenger, update,
        _this = this;
      challenger = _arg.challenger, challengee = _arg.challengee;
      this.sockets = sockets;
      this.id = id != null ? id : UUID();
      this.channel = "game-" + this.id;
      this.world = new b2d.b2World(gravity, true);
      this.players = {};
      this.things = {};
      new Player(this, challenger);
      new Player(this, challengee);
      update = function() {
        var changes, player, thing, _ref;
        _ref = _this.players;
        for (id in _ref) {
          player = _ref[id];
          player.control();
        }
        _this.world.Step(frame_rate.frame_length_seconds, 10, 10);
        _this.world.ClearForces();
        changes = (function() {
          var _ref1, _results;
          _ref1 = this.things;
          _results = [];
          for (id in _ref1) {
            thing = _ref1[id];
            if (thing.body.IsAwake()) {
              _results.push(thing.changes());
            }
          }
          return _results;
        }).call(_this);
        return _this.sockets["in"](_this.channel).volatile.emit('update', changes);
      };
      this.timer = setInterval(update, frame_rate.frame_length_milliseconds);
    }

    Game.prototype.toJSON = function() {
      return {
        id: this.id,
        things: this.things
      };
    };

    Game.prototype.remove = function() {
      clearTimeout(this.timer);
      return delete games[this.id];
    };

    return Game;

  })();

  exports.Game = Game;

}).call(this);
