// Generated by CoffeeScript 1.3.3
(function() {
  var Thing, User, active_commands, all_things, commands, game_node, get_command, get_key_name, meters_to_pixels, module, ready, socket;

  module = angular.module('game', []);

  module.config(function($routeProvider) {
    $routeProvider.when('/', {
      templateUrl: 'home',
      controller: 'home'
    });
    return $routeProvider.when('/room/:room_id', {
      templateUrl: 'game',
      controller: 'game'
    });
  });

  module.run(function($rootScope, socket) {
    var $scope;
    $scope = $rootScope;
    return $scope.new_game = function() {
      return $location.path("#/room/" + (UUID()));
    };
  });

  module.controller('home', function($scope, $location) {});

  module.controller('game', function($scope) {});

  module.factory('socket', function($q, $rootScope) {
    var deferred_identity, socket;
    socket = io.connect();
    deferred_identity = $q.defer();
    socket.identity_promise = deferred_identity.promise;
    socket.on('user_identity', function(user_data) {
      return $rootScope.$apply(function() {
        var user;
        user = new User(user_data);
        deferred_identity.resolve(user);
        return socket.identity = user;
      });
    });
    return socket;
  });

  User = (function() {

    function User(_arg) {
      this.id = _arg.id, this.name = _arg.name;
    }

    return User;

  })();

  module.factory('you', function(socket) {
    return function() {
      return socket.identity;
    };
  });

  module.factory('users', function($http, socket, $rootScope) {
    var all_users, request;
    all_users = [];
    request = $http.get('/users/');
    request.success(function(users) {
      var user;
      return all_users = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          _results.push(new User(user));
        }
        return _results;
      })();
    });
    socket.on('user_join', function(user) {
      return $rootScope.$apply(function() {
        return all_users.push(new User(user));
      });
    });
    socket.on('user_leave', function(user_id) {
      return $rootScope.$apply(function() {
        var user;
        return all_users = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = all_users.length; _i < _len; _i++) {
            user = all_users[_i];
            if (user.id !== user_id) {
              _results.push(user);
            }
          }
          return _results;
        })();
      });
    });
    socket.identity_promise.then(function(user) {
      return all_users.push(user);
    });
    return {
      all: function() {
        return all_users;
      },
      get: function(id) {
        return _.find(all_users, function(user) {
          return user.id === id;
        });
      }
    };
  });

  module.directive('userList', function() {
    return {
      template: "<ul>\n    <li ng-repeat=\"user in get_users()\">\n        <div ng-switch=\"is_you(user)\">\n            <div ng-switch-when=\"true\">{{user.name}} (you)</div>\n            <div ng-switch-when=\"false\">\n                <a ng-click=\"challenge(user)\">challenge {{user.name}}</a>\n            </div>\n        </div>\n    </li>\n</ul>",
      replace: true,
      controller: function($scope, users, socket) {
        $scope.get_users = users.all;
        $scope.is_you = function(user) {
          return user === socket.identity;
        };
        return $scope.challenge = function(user) {
          return socket.emit('send_challenge', user.id);
        };
      }
    };
  });

  module.factory('models', function(users) {
    var Challenge, Message;
    Challenge = (function() {

      function Challenge(_arg) {
        var challengee_id, challenger_id;
        this.id = _arg.id, challenger_id = _arg.challenger_id, challengee_id = _arg.challengee_id;
        this.challenger = users.get(challenger_id);
        this.challengee = users.get(challengee_id);
      }

      return Challenge;

    })();
    Message = (function() {

      function Message(_arg) {
        var user_id;
        this.text = _arg.text, user_id = _arg.user_id;
        this.user = users.get(user_id);
      }

      return Message;

    })();
    return {
      Challenge: Challenge,
      Message: Message,
      User: User
    };
  });

  module.filter('isa', function(models) {
    return function(object, type) {
      return object instanceof models[type];
    };
  });

  module.filter('messagetype', function(models) {
    return function(object) {
      if (object instanceof models.Message) {
        return 'message';
      } else if (object instanceof models.Challenge) {
        return 'challenge';
      }
    };
  });

  module.directive('chat', function() {
    return {
      template: "<div>\n    <ul>\n        <li ng-repeat=\"message in messages\">\n            <div ng-switch=\"message|messagetype\">\n                <div ng-switch-when=\"message\">\n                    <a ng-click=\"select_user(message.user)\">{{message.user.name}}</a>: {{message.text}}\n                </div>\n                <div ng-switch-when=\"challenge\">\n                    {{message.challenger.name}} has challenged you to a game.\n                    <a ng-click=\"accept_challenge(message)\">Accept?</a>\n                </div>\n            </div>\n        </li>\n    </ul>\n    <form ng-submit=\"chat()\">\n        <input ng-model=\"chat_message\">\n    </form>\n</div>",
      replace: true,
      controller: function($scope, socket, users, models) {
        $scope.messages = [];
        $scope.chat = function() {
          socket.emit('chat', $scope.chat_message);
          $scope.messages.push(new models.Message({
            text: $scope.chat_message,
            user: socket.identity
          }));
          return $scope.chat_message = '';
        };
        socket.on('chat', function(message) {
          return $scope.$apply(function() {
            message.user = new User(message.user);
            return $scope.messages.push(message);
          });
        });
        socket.on('got_challenge', function(challenge) {
          return $scope.$apply(function() {
            return $scope.messages.push(new models.Challenge(challenge));
          });
        });
        $scope.select_user = function(user) {
          return $scope.$emit('select-user', user);
        };
        return $scope.accept_challenge = function(challenge) {
          return socket.emit('accept_challenge', challenge.id);
        };
      }
    };
  });

  game_node = null;

  meters_to_pixels = function(meters) {
    return meters * 20;
  };

  Thing = (function() {

    function Thing(_arg) {
      this.size = _arg.size, this.position = _arg.position, this.id = _arg.id;
      all_things[this.id] = this;
      this.element = $('<div class="player"></div>');
      this.element.css({
        width: meters_to_pixels(this.size.x),
        height: meters_to_pixels(this.size.y),
        left: meters_to_pixels(this.position.x) + 200,
        top: meters_to_pixels(this.position.y) + 200,
        'background-color': "#" + this.id.slice(0, 6)
      });
      game_node.append(this.element);
    }

    Thing.prototype.update = function(position) {
      var css;
      this.position = position;
      css = {
        left: meters_to_pixels(this.position.x) + 200,
        top: meters_to_pixels(this.position.y) + 200
      };
      css["" + vendor_prefix + "-transition"] = "left " + frame_rate.frame_length_seconds + "s, top " + frame_rate.frame_length_seconds + "s";
      return this.element.css(css);
    };

    Thing.prototype.remove = function() {
      this.element.remove();
      return delete all_things[this.id];
    };

    return Thing;

  })();

  all_things = {};

  commands = {
    left: 'left',
    right: 'right',
    up: 'up',
    down: 'down'
  };

  active_commands = {};

  get_key_name = function(event) {
    return special_keys[event.which] || String.fromCharCode(event.which).toLowerCase();
  };

  get_command = function(event) {
    var key;
    key = get_key_name(event);
    return commands[key];
  };

  socket = null;

  /*
  $ ->
      game_node = $ '#game'
      socket = io.connect()
      socket.on 'connect', ->
          frame_rate.get_frame_delta()
          $.get '/state', (state) ->
              for id, thing of state.things
                  new Thing thing
              ready()
  */


  ready = function() {
    socket.on('update', function(things) {
      var thing, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = things.length; _i < _len; _i++) {
        thing = things[_i];
        _results.push(all_things[thing.id].update(thing.position));
      }
      return _results;
    });
    socket.on('player_join', function(thing) {
      return new Thing(thing);
    });
    socket.on('player_leave', function(id) {
      return all_things[id].remove();
    });
    $(document).on('keydown', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && !(command in active_commands)) {
        active_commands[command] = true;
        return socket.emit('command_activate', command);
      }
    });
    $(document).on('keyup', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && command in active_commands) {
        delete active_commands[command];
        return socket.emit('command_deactivate', command);
      }
    });
    return $(window).on('blur', function(event) {
      return socket.emit('command_clear');
    });
  };

}).call(this);
