// Generated by CoffeeScript 1.3.3
(function() {
  var Thing, active_commands, all_things, commands, game_node, get_command, get_key_name, next_frame, this_frame;

  game_node = null;

  Thing = (function() {

    function Thing(_arg) {
      this.size = _arg.size, this.id = _arg.id;
      all_things[this.id] = this;
      this.element = $('<div class="player"></div>');
      game_node.append(this.element);
    }

    Thing.prototype.update = function(position) {
      return this.element.css({
        left: position.x + 200,
        top: position.y + 200
      });
    };

    return Thing;

  })();

  all_things = {};

  this_frame = {};

  next_frame = {};

  commands = {
    left: 'left',
    right: 'right',
    up: 'up',
    down: 'down'
  };

  active_commands = {};

  get_key_name = function(event) {
    return special_keys[event.which] || String.fromCharCode(event.which).toLowerCase();
  };

  get_command = function(event) {
    var key;
    key = get_key_name(event);
    return commands[key];
  };

  $(function() {
    var faye, ready, subscription;
    game_node = $('#game');
    faye = new Faye.Client('/faye');
    ready = false;
    subscription = faye.subscribe('/foo', function(message) {
      var id, thing, things, _results;
      things = JSON.parse(message);
      _results = [];
      for (id in things) {
        thing = things[id];
        _results.push(all_things[id].update(thing.position));
      }
      return _results;
    });
    subscription.callback(function() {
      console.log("subscription is now active");
      return $.get('/objects', function(things) {
        var id, thing, _results;
        _results = [];
        for (id in things) {
          thing = things[id];
          _results.push(new Thing(thing));
        }
        return _results;
      });
    });
    subscription.errback(function(error) {
      return console.log("Error: " + error);
    });
    $(document).on('keydown', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && !(command in active_commands)) {
        active_commands[command] = true;
        console.log('publishing');
        return faye.publish('/commands/activate', command);
      }
    });
    return $(document).on('keyup', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && command in active_commands) {
        delete active_commands[command];
        return faye.publish('/commands/deactivate', command);
      }
    });
  });

}).call(this);
