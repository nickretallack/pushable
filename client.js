// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var Thing, active_commands, all_things, commands, faye, get_command, get_key_name, next_frame, subscription, this_frame;
    faye = new Faye.Client('/faye');
    subscription = faye.subscribe('/foo', function(message) {
      return console.log(message);
    });
    subscription.callback(function() {
      return console.log("subscription is now active");
    });
    subscription.errback(function(error) {
      return console.log("Error: " + error);
    });
    all_things = {};
    this_frame = {};
    next_frame = {};
    all_things = {};
    Thing = (function() {

      function Thing(_arg) {
        this.size = _arg.size, this.id = _arg.id;
        all_things[this.id] = this;
        this.element = $('<div class="player"></div>');
      }

      return Thing;

    })();
    $.get('/objects', function(things) {
      var id, thing, _results;
      _results = [];
      for (id in things) {
        thing = things[id];
        _results.push(new Thing(thing));
      }
      return _results;
    });
    commands = {
      left: 'left',
      right: 'right'
    };
    active_commands = {};
    get_key_name = function(event) {
      return special_keys[event.which] || String.fromCharCode(event.which).toLowerCase();
    };
    get_command = function(event) {
      var key;
      key = get_key_name(event);
      return commands[key];
    };
    $(document).on('keydown', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && !(command in active_commands)) {
        active_commands[command] = true;
        console.log('publishing');
        return faye.publish('/commands/activate', command);
      }
    });
    return $(document).on('keyup', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && command in active_commands) {
        delete active_commands[command];
        return faye.publish('/commands/deactivate', command);
      }
    });
  });

}).call(this);
