// Generated by CoffeeScript 1.3.3
(function() {
  var Thing, active_commands, all_things, commands, game_node, get_command, get_key_name, meters_to_pixels, module, ready, socket;

  module = angular.module('game', []);

  module.config(function($routeProvider) {
    $routeProvider.when('/', {
      templateUrl: 'home',
      controller: 'home'
    });
    return $routeProvider.when('/room/:room_id', {
      templateUrl: 'game',
      controller: 'game'
    });
  });

  module.controller('home', function($scope, $location) {
    return $scope.new_game = function() {
      return $location.path("#/room/" + (UUID()));
    };
  });

  module.controller('game', function($scope) {});

  game_node = null;

  meters_to_pixels = function(meters) {
    return meters * 20;
  };

  Thing = (function() {

    function Thing(_arg) {
      this.size = _arg.size, this.position = _arg.position, this.id = _arg.id;
      all_things[this.id] = this;
      this.element = $('<div class="player"></div>');
      this.element.css({
        width: meters_to_pixels(this.size.x),
        height: meters_to_pixels(this.size.y),
        left: meters_to_pixels(this.position.x) + 200,
        top: meters_to_pixels(this.position.y) + 200,
        'background-color': "#" + this.id.slice(0, 6)
      });
      game_node.append(this.element);
    }

    Thing.prototype.update = function(position) {
      var css;
      this.position = position;
      css = {
        left: meters_to_pixels(this.position.x) + 200,
        top: meters_to_pixels(this.position.y) + 200
      };
      css["" + vendor_prefix + "-transition"] = "left " + frame_rate.frame_length_seconds + "s, top " + frame_rate.frame_length_seconds + "s";
      return this.element.css(css);
    };

    Thing.prototype.remove = function() {
      this.element.remove();
      return delete all_things[this.id];
    };

    return Thing;

  })();

  all_things = {};

  commands = {
    left: 'left',
    right: 'right',
    up: 'up',
    down: 'down'
  };

  active_commands = {};

  get_key_name = function(event) {
    return special_keys[event.which] || String.fromCharCode(event.which).toLowerCase();
  };

  get_command = function(event) {
    var key;
    key = get_key_name(event);
    return commands[key];
  };

  socket = null;

  /*
  $ ->
      game_node = $ '#game'
      socket = io.connect()
      socket.on 'connect', ->
          frame_rate.get_frame_delta()
          $.get '/state', (state) ->
              for id, thing of state.things
                  new Thing thing
              ready()
  */


  ready = function() {
    socket.on('update', function(things) {
      var thing, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = things.length; _i < _len; _i++) {
        thing = things[_i];
        _results.push(all_things[thing.id].update(thing.position));
      }
      return _results;
    });
    socket.on('player_join', function(thing) {
      return new Thing(thing);
    });
    socket.on('player_leave', function(id) {
      return all_things[id].remove();
    });
    $(document).on('keydown', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && !(command in active_commands)) {
        active_commands[command] = true;
        return socket.emit('command_activate', command);
      }
    });
    $(document).on('keyup', function(event) {
      var command;
      command = get_command(event);
      if ((command != null) && command in active_commands) {
        delete active_commands[command];
        return socket.emit('command_deactivate', command);
      }
    });
    return $(window).on('blur', function(event) {
      return socket.emit('command_clear');
    });
  };

}).call(this);
